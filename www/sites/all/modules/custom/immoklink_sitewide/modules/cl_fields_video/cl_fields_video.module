<?php

/**
 * Implements hook_field_info().
 */
function cl_fields_video_field_info() {
  return array(
    'cl_fields_video' => array(
      'label' => t('Video'),
      'description' => t("This field stores video's and their previews."),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'cl_fields_video',
      'default_formatter' => 'cl_fields_video',
      'property_type' => 'cl_fields_video',
      'property_callbacks' => array('cl_fields_video_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function cl_fields_video_field_widget_info() {
  return array(
    'cl_fields_video' => array(
      'label' => t('Video and preview field'),
      'field types' => array('cl_fields_video'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function cl_fields_video_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {

    // Compound field for video urls and their preview.
    case 'cl_fields_video':

      // The fields to be rendered.
      $fields = array(
        'video_url' => t('Video url'),
        'video_preview_fid' => t('Video preview image'),
      );

      // Loop through each field and create the appropriate widget.
      foreach ($fields as $key => $label) {
        switch($key) {
          case 'video_url':
            $element[$key] = array(
              '#type' => 'textfield',
              '#title' => $label,
              '#default_value' => isset($items[$delta][$key]) ? $items[$delta][$key] : '',
            );
            break;
          case 'video_preview_fid':
            $element[$key] = array(
              '#type' => 'managed_file',
              '#upload_location' => 'public://video_previews',
              '#progress_indicator' => "bar",
              '#title' => $label,
              '#default_value' => isset($items[$delta][$key]) ? $items[$delta][$key] : 0,
            );

            // Add the validators
            $supported_extensions = array('png', 'gif', 'jpg', 'jpeg');
            $element[$key]['#upload_validators']['file_validate_extensions'][0] = implode(' ', $supported_extensions);
            break;
          default:
            break;
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_validate().
 */
function cl_fields_video_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  global $user;

  if ($field['type'] == 'cl_fields_video') {
    foreach ($items as $delta => $item) {

      // Check if we have an image, if we do make it permanent.
      if (!empty($item['video_preview_fid'])) {
        $file = file_load($item['video_preview_fid']);

        // Change status to permanent.
        $file->status = FILE_STATUS_PERMANENT;

        // Save.
        file_save($file);

        // Record that the module is using the file.
        file_usage_add($file, 'cl_fields_video', 'general', $user->uid);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function cl_fields_video_field_formatter_info() {
  return array(
    'cl_fields_video' => array(
      'label' => t('Video'),
      'field types' => array('cl_fields_video'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function cl_fields_video_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  dpm('hello');
  $element = array();
  $node = menu_get_object();

  if (!empty($node)) {
    switch ($display['type']) {
      case 'cl_fields_video':

        // Theme items.
        foreach ($items as $key => $item) {
          $video = array(
            'video_title' => $node->title . ' ' . t('video') . ' ' . ($key + 1),
            'video_url' => $item['video_url'],
          );

          // Add preview if available.
          if (!empty($item['video_preview_fid'])) {
            $video['video_preview'] = cl_helpers_get_full_path($item['video_preview_fid']);
          }

          $element[$key] = array('#markup' => theme('cl_metadata_video', $video));
        }
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function cl_fields_video_theme($existing, $type, $theme, $path) {
  return array(
  'cl_metadata_video' => array(
    'variables' => array('items' => array(), 'type' => 'ul', 'attributes' => array()),
  ),
  );
}

/**
 * @param $variables
 * @return string
 */
function theme_cl_metadata_video(&$variables) {
  $output = '';
  $output .= $variables['video_preview'];
  return $output;
}

/**
 * @param $fid
 * @return bool|mixed|\stdClass|string
 */
function cl_helpers_get_full_path($fid) {
  $file = file_load($fid);
  $image = image_load($file->uri);
  $content = array(
    'file' => array(
      '#theme' => 'image_style',
      '#style_name' => 'video_previews',
      '#path' => $image->source,
      '#width' => $image->info['width'],
      '#height' => $image->info['height'],
    ),
  );
  $image = drupal_render($content);
  $image = (string)$image;
  $image = str_replace('/styles/video_previews/public', '', $image);
  return $image;
}


/**
 * Custom callback function for metadata.
 *
 * @param $info
 * @param $entity_type
 * @param $field
 * @param $instance
 * @param $field_type
 */
function cl_fields_video_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';

  unset($property['query callback']);

  $property['property info']['video_url'] = array(
    'type' => 'text',
    'label' => t('Video url'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['video_preview_fid'] = array(
    'type' => 'text',
    'label' => t('Video preview fid'),
    'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_field_is_empty().
 */
function cl_fields_video_field_is_empty($item, $field) {
  if ($field['type'] == 'cl_fields_video') {
    return empty($item['video_url']);
  }
}

