<?php
/**
 * @file
 * MWT Sitewide.
 * Exported panels layouts, pages, content-types and mini panels that are used
 * across the whole site.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function immoklink_sitewide_ctools_plugin_api($module, $api) {
  if ($module == 'panels' && $api == 'styles') {
    return array('version' => 2.0);
  }
  // This module exposes exported panels pages.
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
  // This is for mini panels.
  if ($module == "panels_mini" && $api == "panels_default") {
    return array("version" => "1");
  }
  // Now for pm_existing_pages pages.
  if ($module == 'pm_existing_pages' && $api == 'pm_existing_pages') {
    return array('version' => 1);
  }
  if ($module == "ctools_custom_content" && $api == "ctools_content") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function immoklink_sitewide_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'panels' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_default_page_manager_pages().
 */
function immoklink_sitewide_default_page_manager_pages() {
  // A page manager page is a custom page, built using panels, which has its
  // own discrete menu path.
  $pages = array();
  $module = 'immoklink_sitewide';
  $path = drupal_get_path('module', $module) . '/plugins/page_manager_pages';
  foreach (glob("{$path}/*.inc") as $file) {
    include($file);
    $pages[$page->name] = $page;
  }
  return $pages;
}

/**
 * Implements hook_default_page_manager_handlers().
 */
function immoklink_sitewide_default_page_manager_handlers() {
  // A page manager handler is an override to an existing page manager task:
  // For example: a custom panel page for the node-view page.
  $handlers = array();
  $module = 'immoklink_sitewide';
  $path = drupal_get_path('module', $module) . '/plugins/page_manager_handlers';
  foreach (glob("{$path}/*.inc") as $file) {
    include($file);
    $handlers[] = $handler;
  }
  return $handlers;
}

/**
 * Implementation of hook_default_panels_mini().
 */
function immoklink_sitewide_default_panels_mini() {
  $minis = array();
  $module = 'immoklink_sitewide';
  $path = drupal_get_path('module', $module) . '/plugins/panels_mini';
  foreach (glob("{$path}/*.inc") as $file) {
    include($file);
    $minis[$mini->name] = $mini;
  }
  return $minis;
}

/**
 * Implementation of hook_default_ctools_custom_content().
 */
function immoklink_sitewide_default_ctools_custom_content() {
  $content_panes = array();
  $module = 'immoklink_sitewide';
  $path = drupal_get_path('module', $module) . '/plugins/content_panes';
  foreach (glob("{$path}/*.inc") as $file) {
    include($file);
    $content_panes[$content->name] = $content;
  }
  return $content_panes;
}

/**
 * Implements hook_ctools_content_subtype_alter().
 */
function immoklink_sitewide_ctools_content_subtype_alter(&$subtype, &$plugin) {
  // Panels UI is bugged. Use a custom icon for Mini panels, so they are easily
  // spotted in the UI.
  if ($plugin['module'] == 'panels_mini') {
    $plugin['icon'] = $subtype['icon'] = drupal_get_path('module', 'immoklink_sitewide') . '/images/mini_panel_icon.png';
  }
}

/**
 * Implements hook_views_api().
 */
function immoklink_sitewide_views_api() {
  return array(
    'api' => '3.0',
  );
}

/**
 * Implements hook_views_default_views().
 */
function immoklink_sitewide_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'immoklink_sitewide') . '/plugins/views', '/inc$/', array('key' => 'filename', 'recurse' => FALSE));
  $views = array();
  if (!empty($files)) {
    foreach ($files as $file) {
      @include ($file->uri);
      $views[$view->name] = $view;
    }
  }
  return $views;
}


/**
 * Generates presets of several image styles for a given image.
 *
 * @param $file
 *   The Image file.
 * @param array $image_styles
 *   An array containing the names of the image styles that should be used to
 *   generate the different image presets.
 */
function mwt_sitewide_generate_image_styles_per_image($file, $image_styles = array()) {
  // No file object or image styles -> nothing to do.
  if (!is_object($file) || empty($image_styles)) {
    return;
  }
  foreach ($image_styles as $style_name) {
    $style = image_style_load($style_name);

    // Make sure the image style is valid.
    if (!empty($style)) {
      // Get the location of the new image.
      $derivative_uri = image_style_path($style_name, $file->uri);
      // Create the image and add an entry to watchdog with the result.
      if (image_style_create_derivative($style, $file->uri, $derivative_uri)) {
        watchdog('mwt_image_generation', 'A %style image variant was generated from the image %filename',
          array('%style' => $style_name, '%filename' => $file->filename));
      }
      else {
        watchdog('mwt_image_generation', 'A %style image variant could not be generated from the image %filename',
          array('%style' => $style_name, '%filename' => $file->filename), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function immoklink_sitewide_menu() {
  $items = array();
  $items['gallery-thumbnail/%node'] = array(
    'title' => 'Gallery thumbnail listings',
    'description' => 'Thumbnail listings of gallery image.',
    'page callback' => 'gallery_thumbnail_listings_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Callback function.
 */
function gallery_thumbnail_listings_page($node) {
  $output = '';

  $output .= '<div class="page"><article><h1>Projects</h1></article>';
  $images = $node->field_gallery_images[LANGUAGE_NONE];

  $output .= '<div class="content grid"><div class="wrap">';
  foreach ($images as $image) {
    $image = paragraphs_field_get_entity($image);

    $image_path = $image->field_gallery_bundle_image[LANGUAGE_NONE][0]['uri'];
    $image = theme_image_style(array('style_name' => 'gallery_thumbnail', 'path' => $image_path, 'height' => '', 'width' => '', 'attributes' => array('class' => array('fade-me-in'))));
    $path = '/' . drupal_get_path_alias('node/' . $node->nid);
    $output .= '<a href="' . $path . '" class="grid-item">';
    $output .= $image;
    $output .= '<div class="overlay"></div></a>';
  }
  $output .= '</div></div></div>';

  return $output;
}
